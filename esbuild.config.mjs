import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs/promises";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const vaultPath =
	"/Users/ruben/Library/Mobile Documents/iCloud~md~obsidian/Documents/git-notes-in-icloud/.obsidian/plugins/cambrer";
const prod = process.argv[2] === "production";

const copyPlugin = {
	name: "copy-to-vault",
	setup: (build) => {
		build.onEnd(async (result) => {
			if (result.errors.length > 0) return;

			console.log("Build succeeded, copying files...");
			await fs.cp("main.js", path.join(vaultPath, "main.js"));
			await fs.cp("manifest.json", path.join(vaultPath, "manifest.json"));
			// Copy the new command palette files
			await fs.cp("metap.js", path.join(vaultPath, "metap.js"));
			await fs.cp("metap.css", path.join(vaultPath, "metap.css"));
			await fs.cp(
				"monoid-italic.woff2",
				path.join(vaultPath, "monoid-italic.woff2"),
			);
			await fs.cp(
				"monoid-regular.woff2",
				path.join(vaultPath, "monoid-regular.woff2"),
			);
			await fs.cp(
				"monoid-bold.woff2",
				path.join(vaultPath, "monoid-bold.woff2"),
			);
			await fs.cp("template.html", path.join(vaultPath, "template.html"));
			// Use a try-catch for optional files like styles.css
			try {
				await fs.cp("styles.css", path.join(vaultPath, "styles.css"));
			} catch (err) {
				if (err.code !== "ENOENT") throw err;
				// Ignore error if styles.css doesn't exist
			}
			console.log("Files copied to vault.");
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	plugins: [copyPlugin],
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
